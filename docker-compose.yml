version: '3.1'

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U corpus" ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - corpus_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - corpus_network

  corpus:
    build:
      context: corpus
      dockerfile: dev-Dockerfile
    working_dir: /corpus
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    restart: always
    ports:
      - "8000:8000"
      - "465:465"
    networks:
      - corpus_network
    volumes:
      - ./corpus:/corpus
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - ENVIRONMENT=DEVELOPMENT
      - EMAIL_PROTOCOL=console

  jstoolchain:
    build:
      context: corpus
      dockerfile: node-Dockerfile
    working_dir: /opt/app
    volumes:
      - ./corpus/templates:/opt/app/templates
    command: npm run tailwind-dev
    tty: true

networks:
  corpus_network:

volumes:
  static_files:
  postgres_data:
