# Generated by Django 5.2.1 on 2025-05-27 17:49

import accounts.validators
import corpus.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('config', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_no', models.CharField(max_length=15, unique=True, validators=[accounts.validators.validate_phone_number], verbose_name='Phone Number')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to disclose')], max_length=1)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Personal Email')),
                ('profile_pic', models.ImageField(blank=True, default=None, null=True, upload_to='accounts/profile/pics', validators=[corpus.validators.validate_image])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExecutiveMember',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('edu_email', models.EmailField(max_length=254, unique=True, validators=[accounts.validators.validate_nitk_email], verbose_name='NITK EDU Email')),
                ('roll_number', models.CharField(max_length=8, unique=True, validators=[accounts.validators.validate_roll_number], verbose_name='NITK Roll Number')),
                ('reg_number', models.CharField(max_length=10, unique=True, validators=[accounts.validators.validate_reg_number], verbose_name='NITK Registration Number')),
                ('minor_branch', models.CharField(blank=True, choices=[('WO', 'Water Resources and Ocean Engineering'), ('CH', 'Chemical Engineering'), ('CM', 'Chemistry'), ('CV', 'Civil Engineering'), ('CS', 'Computer Science and Engineering'), ('EE', 'Electrical and Electronics Engineering'), ('EC', 'Electronics and Communication Engineering'), ('IT', 'Information Technology'), ('MA', 'Mathematical and Computational Sciences'), ('ME', 'Mechanical Engineering'), ('MT', 'Metallurgical and Materials Engineering'), ('MN', 'Mining Engineering'), ('PS', 'Physics'), ('SM', 'School of Humanities, Social Sciences and Management')], max_length=2, null=True, verbose_name='Minor Branch')),
                ('ieee_number', models.CharField(blank=True, max_length=10, null=True, validators=[accounts.validators.validate_ieee_number], verbose_name='IEEE Membership Number')),
                ('ieee_email', models.EmailField(blank=True, max_length=254, null=True, validators=[accounts.validators.validate_ieee_email], verbose_name='IEEE Email')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='Linkedin Profile URL')),
                ('github', models.CharField(blank=True, max_length=39, null=True, verbose_name='GitHub Username')),
                ('hide_github', models.BooleanField(default=False)),
                ('hide_linkedin', models.BooleanField(default=False)),
                ('is_nep', models.BooleanField(default=False, verbose_name='Is NEP Member?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='Date Joined')),
                ('sig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config.sig')),
            ],
        ),
    ]
