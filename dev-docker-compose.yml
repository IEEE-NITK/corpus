version: '3.1'

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    env_file:
      - .env
    expose:
      - ${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U corpus"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - corpus_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    expose:
      - ${ADMINER_PORT}
    env_file:
      - .env
    networks:
      - corpus_network

  backend:
    build:
      context: backend
      dockerfile: dev-Dockerfile
    working_dir: /corpus
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    restart: always
    expose:
      - ${DJANGO_BACKEND_PORT}
    networks:
      - corpus_network
    volumes:
      - ./backend:/corpus
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env

  frontend:
    image: node:18.16.0-alpine
    working_dir: /app
    restart: always
    command: sh -c "npm install && npm run dev -- --port 3000"
    networks:
      - corpus_network
    volumes:
      - ./frontend:/app
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "3000"

  storybook:
    image: node:18.16.0-alpine
    working_dir: /app
    restart: always
    command: sh -c "npm install && npm run storybook"
    networks:
      - corpus_network
    volumes:
      - ./frontend:/app
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "6006:6006"

  nginx:
    build: nginx
    restart: always
    depends_on:
      - backend
      - postgres
    networks:
      - corpus_network
    ports:
      - "80:80"
    env_file:
      - .env

networks:
  corpus_network:

volumes:
  static_files:
  postgres_data:
